package com.bll.lnkwrite.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;

import com.bll.lnkwrite.mvp.model.WallpaperBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WALLPAPER_BEAN".
*/
public class WallpaperBeanDao extends AbstractDao<WallpaperBean, Long> {

    public static final String TABLENAME = "WALLPAPER_BEAN";

    /**
     * Properties of entity WallpaperBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property ContentId = new Property(2, int.class, "contentId", false, "CONTENT_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Info = new Property(4, String.class, "info", false, "INFO");
        public final static Property Price = new Property(5, int.class, "price", false, "PRICE");
        public final static Property ImageUrl = new Property(6, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property BodyUrl = new Property(7, String.class, "bodyUrl", false, "BODY_URL");
        public final static Property Supply = new Property(8, int.class, "supply", false, "SUPPLY");
        public final static Property Author = new Property(9, String.class, "author", false, "AUTHOR");
        public final static Property Paths = new Property(10, String.class, "paths", false, "PATHS");
        public final static Property Date = new Property(11, long.class, "date", false, "DATE");
        public final static Property BuyStatus = new Property(12, int.class, "buyStatus", false, "BUY_STATUS");
        public final static Property IsCheck = new Property(13, boolean.class, "isCheck", false, "IS_CHECK");
    }

    private final StringConverter pathsConverter = new StringConverter();

    public WallpaperBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WallpaperBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WALLPAPER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"CONTENT_ID\" INTEGER NOT NULL ," + // 2: contentId
                "\"TITLE\" TEXT," + // 3: title
                "\"INFO\" TEXT," + // 4: info
                "\"PRICE\" INTEGER NOT NULL ," + // 5: price
                "\"IMAGE_URL\" TEXT," + // 6: imageUrl
                "\"BODY_URL\" TEXT," + // 7: bodyUrl
                "\"SUPPLY\" INTEGER NOT NULL ," + // 8: supply
                "\"AUTHOR\" TEXT," + // 9: author
                "\"PATHS\" TEXT," + // 10: paths
                "\"DATE\" INTEGER NOT NULL ," + // 11: date
                "\"BUY_STATUS\" INTEGER NOT NULL ," + // 12: buyStatus
                "\"IS_CHECK\" INTEGER NOT NULL );"); // 13: isCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WALLPAPER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WallpaperBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getContentId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(5, info);
        }
        stmt.bindLong(6, entity.getPrice());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
 
        String bodyUrl = entity.getBodyUrl();
        if (bodyUrl != null) {
            stmt.bindString(8, bodyUrl);
        }
        stmt.bindLong(9, entity.getSupply());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(10, author);
        }
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(11, pathsConverter.convertToDatabaseValue(paths));
        }
        stmt.bindLong(12, entity.getDate());
        stmt.bindLong(13, entity.getBuyStatus());
        stmt.bindLong(14, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WallpaperBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getContentId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(5, info);
        }
        stmt.bindLong(6, entity.getPrice());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
 
        String bodyUrl = entity.getBodyUrl();
        if (bodyUrl != null) {
            stmt.bindString(8, bodyUrl);
        }
        stmt.bindLong(9, entity.getSupply());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(10, author);
        }
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(11, pathsConverter.convertToDatabaseValue(paths));
        }
        stmt.bindLong(12, entity.getDate());
        stmt.bindLong(13, entity.getBuyStatus());
        stmt.bindLong(14, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WallpaperBean readEntity(Cursor cursor, int offset) {
        WallpaperBean entity = new WallpaperBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // contentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // info
            cursor.getInt(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bodyUrl
            cursor.getInt(offset + 8), // supply
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // author
            cursor.isNull(offset + 10) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 10)), // paths
            cursor.getLong(offset + 11), // date
            cursor.getInt(offset + 12), // buyStatus
            cursor.getShort(offset + 13) != 0 // isCheck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WallpaperBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setContentId(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInfo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.getInt(offset + 5));
        entity.setImageUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBodyUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSupply(cursor.getInt(offset + 8));
        entity.setAuthor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPaths(cursor.isNull(offset + 10) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 10)));
        entity.setDate(cursor.getLong(offset + 11));
        entity.setBuyStatus(cursor.getInt(offset + 12));
        entity.setIsCheck(cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WallpaperBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WallpaperBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WallpaperBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
